{% extends '_layout.twig' %}

{% block body %}

    {% set filterValues = { style: 'elegant', colour: 'green', size: 'm', cut: 'slim' } %}
    {# Your solution code #}
    {# 
        Query entries, filtering entries that are not part of the current filter 
        Fetch as collection for further processing
        Extract `slug` column
        For each filter (slug) return an object with the filter slug as key, and the current filter filterValue
        Flatten the nested collection and return as array
    #}
    {% set filterValues = craft.entries()
                                .section('Filters')
                                .slug(filterValues|keys)
                                .collect()
                                .pluck('slug')
                                .flatMap(k => { (k): filterValues[k] })
                                .toArray()
    %}
    <div class="text-center font-mono leading-loose">
        {{ filterValues|url_encode }}
        <div class="font-sans text-gray-500">should equal</div>
        cut=slim&colour=green&size=m&style=elegant
    </div>

    <hr class="w-full border border-gray-300">

    {% set filterValues = { size: 's', colour: 'yellow' } %}
    {# Your solution code #}
    {% set filterValues = craft.entries()
                                .section('Filters')
                                .slug(filterValues|keys)
                                .collect()
                                .pluck('slug')
                                .flatMap(k => { (k): filterValues[k] })
                                .toArray()
    %}
    <div class="text-center font-mono leading-loose">
        {{ filterValues|url_encode }}
        <div class="font-sans text-gray-500">should equal</div>
        colour=yellow&size=s
    </div>

    <hr class="w-full border border-gray-300">

    {% set filterValues = { cut: 'regular' } %}
    {# Your solution code #}
    {% set filterValues = craft.entries()
                            .section('Filters')
                            .slug(filterValues|keys)
                            .collect()
                            .pluck('slug')
                            .flatMap(k => { (k): filterValues[k] })
                            .toArray()
    %}
<div class="text-center font-mono leading-loose">
    {{ filterValues|url_encode }}
    <div class="font-sans text-gray-500">should equal</div>
    cut=regular
</div>

{% endblock %}
